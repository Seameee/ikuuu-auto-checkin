name: Upstream Sync

# 保持顶层 permissions: contents: write，用于同步 action 推送代码
permissions:
  contents: write

on:
  schedule:
    - cron: "00 15 * * *" # every day
  workflow_dispatch:

jobs:
  sync_latest_from_upstream:
    name: Sync latest commits from upstream repo
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.fork }}

    # 在 Job 级别添加 permissions，特别是 actions: write，用于触发另一个工作流
    # contents: write 在 Job 级别显式声明或继承自 workflow 级别都可以
    permissions:
      contents: write # 显式声明或继承
      actions: write # <-- 这里是关键，用于触发 workflow_dispatch

    steps:
      # Step 1: run a standard checkout action
      - name: Checkout target repo
        uses: actions/checkout@v3

      # Step 2: run the sync action
      - name: Sync upstream changes
        id: sync
        uses: aormsby/Fork-Sync-With-Upstream-action@v3.4
        with:
          upstream_sync_repo: ewigl/ikuuu-auto-checkin
          upstream_sync_branch: main
          target_sync_branch: main
          target_repo_token: ${{ secrets.GITHUB_TOKEN }}

          # Set test_mode true to run tests instead of the true action!!
          test_mode: false

      - name: Sync check
        if: failure()
        run: |
          echo "[Error] 由于上游仓库的 workflow 文件变更，导致 GitHub 自动暂停了本次自动更新，你需要手动 Sync Fork 一次，详细教程请查看项目README.md "
          echo "[Error] Due to a change in the workflow file of the upstream repository, GitHub has automatically suspended the scheduled automatic update. You need to manually sync your fork. Please refer to the project README.md for instructions. "
          exit 1

      # Step 3: Trigger the Deploy Backend Workflow if sync was successful and changes were synced
      - name: Trigger Deploy Backend Workflow
        # Condition to trigger: sync step must have succeeded AND changes were actually synced (STATUS == 'SYNCED')
        if: success() && steps.sync.outputs.STATUS == 'SYNCED'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Sync successful and changes were synced. Triggering Deploy Backend workflow...');
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'docker-build-backend.yml', # <-- 再次确认这个文件名是否正确
                ref: 'main' # 触发 main 分支上的 workflow_dispatch
              });
              console.log('Successfully triggered Deploy Backend workflow.');
            } catch (error) {
              console.error('Failed to trigger Deploy Backend workflow:', error);
              // 根据需要决定是否失败整个工作流
              // throw error;
            }
